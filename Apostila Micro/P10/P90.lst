CCS PCH C Compiler, Version 5.007, 61971               30-dez-19 19:40

               Filename:   C:\Users\Fabio T. Brito\Dropbox\IFCE\Disciplinas_IFCE\Apostilas IFCE\Microcontroladores e dispositivos periféricos\Programas apostila oficiais\Apostila Micro\P90\P90.lst

               ROM used:   980 bytes (3%)
                           Largest free fragment is 31788
               RAM used:   9 (0%) at main() level
                           33 (2%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0356
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
0018:  DATA 0C,20
001A:  DATA 20,54
001C:  DATA 65,6D
001E:  DATA 70,6F
0020:  DATA 72,69
0022:  DATA 7A,61
0024:  DATA 64,6F
0026:  DATA 72,20
0028:  DATA 20,00
002A:  DATA 20,20
002C:  DATA 20,20
002E:  DATA 20,20
0030:  DATA 20,20
0032:  DATA 25,6C
0034:  DATA 75,20
0036:  DATA 00,00
*
01E0:  TBLRD*+
01E2:  MOVF   FF5,F
01E4:  BZ    01FE
01E6:  MOVFF  FF6,08
01EA:  MOVFF  FF7,09
01EE:  MOVFF  FF5,14
01F2:  RCALL  0190
01F4:  MOVFF  08,FF6
01F8:  MOVFF  09,FF7
01FC:  BRA    01E0
01FE:  GOTO   0382 (RETURN)
0202:  TBLRD*+
0204:  MOVFF  FF6,09
0208:  MOVFF  FF7,0A
020C:  MOVFF  FF5,14
0210:  RCALL  0190
0212:  MOVFF  09,FF6
0216:  MOVFF  0A,FF7
021A:  DECFSZ 08,F
021C:  BRA    0202
021E:  GOTO   039A (RETURN)
0222:  BTFSC  FD8.1
0224:  BRA    022C
0226:  CLRF   FEA
0228:  MOVLW  1C
022A:  MOVWF  FE9
022C:  CLRF   00
022E:  CLRF   01
0230:  CLRF   02
0232:  CLRF   03
0234:  CLRF   1C
0236:  CLRF   1D
0238:  CLRF   1E
023A:  CLRF   1F
023C:  MOVF   1B,W
023E:  IORWF  1A,W
0240:  IORWF  19,W
0242:  IORWF  18,W
0244:  BZ    029E
0246:  MOVLW  20
0248:  MOVWF  20
024A:  BCF    FD8.0
024C:  RLCF   14,F
024E:  RLCF   15,F
0250:  RLCF   16,F
0252:  RLCF   17,F
0254:  RLCF   1C,F
0256:  RLCF   1D,F
0258:  RLCF   1E,F
025A:  RLCF   1F,F
025C:  MOVF   1B,W
025E:  SUBWF  1F,W
0260:  BNZ   0272
0262:  MOVF   1A,W
0264:  SUBWF  1E,W
0266:  BNZ   0272
0268:  MOVF   19,W
026A:  SUBWF  1D,W
026C:  BNZ   0272
026E:  MOVF   18,W
0270:  SUBWF  1C,W
0272:  BNC   0292
0274:  MOVF   18,W
0276:  SUBWF  1C,F
0278:  MOVF   19,W
027A:  BTFSS  FD8.0
027C:  INCFSZ 19,W
027E:  SUBWF  1D,F
0280:  MOVF   1A,W
0282:  BTFSS  FD8.0
0284:  INCFSZ 1A,W
0286:  SUBWF  1E,F
0288:  MOVF   1B,W
028A:  BTFSS  FD8.0
028C:  INCFSZ 1B,W
028E:  SUBWF  1F,F
0290:  BSF    FD8.0
0292:  RLCF   00,F
0294:  RLCF   01,F
0296:  RLCF   02,F
0298:  RLCF   03,F
029A:  DECFSZ 20,F
029C:  BRA    024A
029E:  MOVFF  1C,FEF
02A2:  MOVFF  1D,FEC
02A6:  MOVFF  1E,FEC
02AA:  MOVFF  1F,FEC
02AE:  RETURN 0
02B0:  MOVF   FE9,W
02B2:  MOVWF  0C
02B4:  MOVLW  3B
02B6:  MOVWF  13
02B8:  MOVLW  9A
02BA:  MOVWF  12
02BC:  MOVLW  CA
02BE:  MOVWF  11
02C0:  CLRF   10
02C2:  MOVLW  0A
02C4:  MOVWF  0E
02C6:  BSF    FD8.1
02C8:  CLRF   FEA
02CA:  MOVLW  08
02CC:  MOVWF  FE9
02CE:  MOVFF  0B,17
02D2:  MOVFF  0A,16
02D6:  MOVFF  09,15
02DA:  MOVFF  08,14
02DE:  MOVFF  13,1B
02E2:  MOVFF  12,1A
02E6:  MOVFF  11,19
02EA:  MOVFF  10,18
02EE:  RCALL  0222
02F0:  MOVF   01,W
02F2:  MOVF   00,F
02F4:  BNZ   0314
02F6:  MOVF   0E,W
02F8:  XORLW  01
02FA:  BZ    0314
02FC:  MOVF   0C,W
02FE:  BZ    0316
0300:  ANDLW  0F
0302:  SUBWF  0E,W
0304:  BZ    0308
0306:  BC    0320
0308:  BTFSC  0C.7
030A:  BRA    0320
030C:  BTFSC  0C.6
030E:  BRA    0316
0310:  MOVLW  20
0312:  BRA    0318
0314:  CLRF   0C
0316:  MOVLW  30
0318:  ADDWF  00,F
031A:  MOVFF  00,14
031E:  RCALL  0190
0320:  BCF    FD8.1
0322:  MOVFF  13,17
0326:  MOVFF  12,16
032A:  MOVFF  11,15
032E:  MOVFF  10,14
0332:  CLRF   1B
0334:  CLRF   1A
0336:  CLRF   19
0338:  MOVLW  0A
033A:  MOVWF  18
033C:  RCALL  0222
033E:  MOVFF  03,13
0342:  MOVFF  02,12
0346:  MOVFF  01,11
034A:  MOVFF  00,10
034E:  DECFSZ 0E,F
0350:  BRA    02C6
0352:  GOTO   03B0 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses HS, CPUDIV1,PLL5,USBDIV 
.................... #use delay(clock=20000000) 
*
0038:  CLRF   FEA
003A:  MOVLW  15
003C:  MOVWF  FE9
003E:  MOVF   FEF,W
0040:  BZ    005C
0042:  MOVLW  06
0044:  MOVWF  01
0046:  CLRF   00
0048:  DECFSZ 00,F
004A:  BRA    0048
004C:  DECFSZ 01,F
004E:  BRA    0046
0050:  MOVLW  7B
0052:  MOVWF  00
0054:  DECFSZ 00,F
0056:  BRA    0054
0058:  DECFSZ FEF,F
005A:  BRA    0042
005C:  RETURN 0
.................... #use standard_io(B) //comentar linha caso a biblioteca do LCD seja diferente 
.................... #define use_portB_lcd TRUE //comentar linha caso a biblioteca do LCD seja diferente 
.................... #define LCD_TYPE 2 
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
008C:  MOVLW  0F
008E:  ANDWF  F93,W
0090:  IORLW  F0
0092:  MOVWF  F93
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0094:  BSF    F8A.2
....................    delay_cycles(1); 
0096:  NOP   
....................    lcd_output_enable(1); 
0098:  BSF    F8A.0
....................    delay_cycles(1); 
009A:  NOP   
....................    high = lcd_read_nibble(); 
009C:  RCALL  0080
009E:  MOVFF  01,1C
....................        
....................    lcd_output_enable(0); 
00A2:  BCF    F8A.0
....................    delay_cycles(1); 
00A4:  NOP   
....................    lcd_output_enable(1); 
00A6:  BSF    F8A.0
....................    delay_us(1); 
00A8:  BRA    00AA
00AA:  BRA    00AC
00AC:  NOP   
....................    low = lcd_read_nibble(); 
00AE:  RCALL  0080
00B0:  MOVFF  01,1B
....................        
....................    lcd_output_enable(0); 
00B4:  BCF    F8A.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00B6:  MOVLW  0F
00B8:  ANDWF  F93,W
00BA:  MOVWF  F93
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BC:  SWAPF  1C,W
00BE:  MOVWF  00
00C0:  MOVLW  F0
00C2:  ANDWF  00,F
00C4:  MOVF   00,W
00C6:  IORWF  1B,W
00C8:  MOVWF  01
00CA:  GOTO   00D8 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0080:  MOVF   F81,W
0082:  MOVWF  00
0084:  SWAPF  00,W
0086:  ANDLW  0F
0088:  MOVWF  01
....................   #endif 
008A:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
005E:  SWAPF  1C,W
0060:  ANDLW  F0
0062:  MOVWF  00
0064:  MOVLW  0F
0066:  ANDWF  F8A,W
0068:  IORWF  00,W
006A:  MOVWF  F8A
....................   #endif 
....................        
....................    delay_cycles(1); 
006C:  NOP   
....................    lcd_output_enable(1); 
006E:  BSF    F8A.0
....................    delay_us(2); 
0070:  MOVLW  02
0072:  MOVWF  00
0074:  DECFSZ 00,F
0076:  BRA    0074
0078:  BRA    007A
007A:  NOP   
....................    lcd_output_enable(0); 
007C:  BCF    F8A.0
007E:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00CE:  BCF    F93.0
....................    lcd_rs_tris(); 
00D0:  BCF    F93.1
....................    lcd_rw_tris(); 
00D2:  BCF    F93.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00D4:  BCF    F8A.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
00D6:  BRA    008C
00D8:  MOVFF  01,1B
00DC:  BTFSC  01.7
00DE:  BRA    00D6
....................    lcd_output_rs(address); 
00E0:  BCF    F8A.1
00E2:  BTFSC  19.0
00E4:  BSF    F8A.1
....................    delay_cycles(1); 
00E6:  NOP   
....................    lcd_output_rw(0); 
00E8:  BCF    F8A.2
....................    delay_cycles(1); 
00EA:  NOP   
....................    lcd_output_enable(0); 
00EC:  BCF    F8A.0
....................    lcd_send_nibble(n >> 4); 
00EE:  SWAPF  1A,W
00F0:  MOVWF  1B
00F2:  MOVLW  0F
00F4:  ANDWF  1B,F
00F6:  MOVFF  1B,1C
00FA:  RCALL  005E
....................    lcd_send_nibble(n & 0xf); 
00FC:  MOVF   1A,W
00FE:  ANDLW  0F
0100:  MOVWF  1B
0102:  MOVWF  1C
0104:  RCALL  005E
0106:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0108:  MOVLW  0F
010A:  ANDWF  F93,W
010C:  MOVWF  F93
....................   #endif 
....................    lcd_enable_tris(); 
010E:  BCF    F93.0
....................    lcd_rs_tris(); 
0110:  BCF    F93.1
....................    lcd_rw_tris(); 
0112:  BCF    F93.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0114:  BCF    F8A.1
....................    lcd_output_rw(0); 
0116:  BCF    F8A.2
....................    lcd_output_enable(0); 
0118:  BCF    F8A.0
....................      
....................    delay_ms(15); 
011A:  MOVLW  0F
011C:  MOVWF  15
011E:  RCALL  0038
....................    for(i=1;i<=3;++i) 
0120:  MOVLW  01
0122:  MOVWF  08
0124:  MOVF   08,W
0126:  SUBLW  03
0128:  BNC   013A
....................    { 
....................        lcd_send_nibble(3); 
012A:  MOVLW  03
012C:  MOVWF  1C
012E:  RCALL  005E
....................        delay_ms(5); 
0130:  MOVLW  05
0132:  MOVWF  15
0134:  RCALL  0038
0136:  INCF   08,F
0138:  BRA    0124
....................    } 
....................     
....................    lcd_send_nibble(2); 
013A:  MOVLW  02
013C:  MOVWF  1C
013E:  RCALL  005E
....................    delay_ms(5); 
0140:  MOVLW  05
0142:  MOVWF  15
0144:  RCALL  0038
....................    for(i=0;i<=3;++i) 
0146:  CLRF   08
0148:  MOVF   08,W
014A:  SUBLW  03
014C:  BNC   016A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
014E:  CLRF   03
0150:  MOVF   08,W
0152:  MOVFF  FF2,09
0156:  BCF    FF2.7
0158:  RCALL  0004
015A:  BTFSC  09.7
015C:  BSF    FF2.7
015E:  MOVWF  09
0160:  CLRF   19
0162:  MOVWF  1A
0164:  RCALL  00CE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0166:  INCF   08,F
0168:  BRA    0148
016A:  GOTO   0370 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
016E:  DECFSZ 16,W
0170:  BRA    0174
0172:  BRA    017A
....................       address=LCD_LINE_TWO; 
0174:  MOVLW  40
0176:  MOVWF  17
0178:  BRA    017C
....................    else 
....................       address=0; 
017A:  CLRF   17
....................       
....................    address+=x-1; 
017C:  MOVLW  01
017E:  SUBWF  15,W
0180:  ADDWF  17,F
....................    lcd_send_byte(0,0x80|address); 
0182:  MOVF   17,W
0184:  IORLW  80
0186:  MOVWF  18
0188:  CLRF   19
018A:  MOVWF  1A
018C:  RCALL  00CE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
018E:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0190:  MOVF   14,W
0192:  XORLW  07
0194:  BZ    01A4
0196:  XORLW  0B
0198:  BZ    01AE
019A:  XORLW  06
019C:  BZ    01BE
019E:  XORLW  02
01A0:  BZ    01CA
01A2:  BRA    01D4
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01A4:  MOVLW  01
01A6:  MOVWF  15
01A8:  MOVWF  16
01AA:  RCALL  016E
01AC:  BRA    01DE
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01AE:  CLRF   19
01B0:  MOVLW  01
01B2:  MOVWF  1A
01B4:  RCALL  00CE
....................                      delay_ms(2); 
01B6:  MOVLW  02
01B8:  MOVWF  15
01BA:  RCALL  0038
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01BC:  BRA    01DE
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01BE:  MOVLW  01
01C0:  MOVWF  15
01C2:  MOVLW  02
01C4:  MOVWF  16
01C6:  RCALL  016E
01C8:  BRA    01DE
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01CA:  CLRF   19
01CC:  MOVLW  10
01CE:  MOVWF  1A
01D0:  RCALL  00CE
01D2:  BRA    01DE
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01D4:  MOVLW  01
01D6:  MOVWF  19
01D8:  MOVFF  14,1A
01DC:  RCALL  00CE
....................      #endif 
....................    } 
01DE:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... unsigned int32 n=0; 
.................... void main() 
*
0356:  CLRF   FF8
0358:  BCF    FD0.7
035A:  CLRF   07
035C:  CLRF   06
035E:  CLRF   05
0360:  CLRF   04
0362:  MOVF   FC1,W
0364:  ANDLW  C0
0366:  IORLW  0F
0368:  MOVWF  FC1
036A:  MOVLW  07
036C:  MOVWF  FB4
.................... {lcd_init(); 
036E:  BRA    0108
.................... while(true) 
.................... {lcd_gotoxy(1,1); 
0370:  MOVLW  01
0372:  MOVWF  15
0374:  MOVWF  16
0376:  RCALL  016E
.................... printf(lcd_putc,"\f  Temporizador  ", ); 
0378:  MOVLW  18
037A:  MOVWF  FF6
037C:  MOVLW  00
037E:  MOVWF  FF7
0380:  BRA    01E0
.................... lcd_gotoxy(1,2); 
0382:  MOVLW  01
0384:  MOVWF  15
0386:  MOVLW  02
0388:  MOVWF  16
038A:  RCALL  016E
.................... printf(lcd_putc,"        %lu ",n); 
038C:  MOVLW  2A
038E:  MOVWF  FF6
0390:  MOVLW  00
0392:  MOVWF  FF7
0394:  MOVLW  08
0396:  MOVWF  08
0398:  BRA    0202
039A:  MOVLW  41
039C:  MOVWF  FE9
039E:  MOVFF  07,0B
03A2:  MOVFF  06,0A
03A6:  MOVFF  05,09
03AA:  MOVFF  04,08
03AE:  BRA    02B0
03B0:  MOVLW  20
03B2:  MOVWF  14
03B4:  RCALL  0190
.................... delay_ms(1000); 
03B6:  MOVLW  04
03B8:  MOVWF  08
03BA:  MOVLW  FA
03BC:  MOVWF  15
03BE:  RCALL  0038
03C0:  DECFSZ 08,F
03C2:  BRA    03BA
.................... n=n+1; 
03C4:  MOVLW  01
03C6:  ADDWF  04,F
03C8:  MOVLW  00
03CA:  ADDWFC 05,F
03CC:  ADDWFC 06,F
03CE:  ADDWFC 07,F
03D0:  BRA    0370
.................... }} 
....................  
03D2:  SLEEP 

Configuration Fuses:
   Word  1: CC24   PLL5 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
