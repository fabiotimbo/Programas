CCS PCH C Compiler, Version 5.007, 61971               30-jun-20 05:06

               Filename:   C:\Users\Fabio T. Brito\Dropbox\IFCE\Disciplinas_IFCE\Apostilas IFCE\Micro\Programas oficiais\Apostila Micro\P98\P98.lst

               ROM used:   1320 bytes (4%)
                           Largest free fragment is 31448
               RAM used:   4 (0%) at main() level
                           35 (2%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   03D4
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
0018:  DATA 0D,0A
001A:  DATA 53,65
001C:  DATA 6C,65
001E:  DATA 63,69
0020:  DATA 6F,6E
0022:  DATA 65,20
0024:  DATA 61,20
0026:  DATA 72,6F
0028:  DATA 74,61
002A:  DATA 63,61
002C:  DATA 6F,3A
002E:  DATA 0D,0A
0030:  DATA 00,00
0032:  DATA 20,20
0034:  DATA 20,20
0036:  DATA 31,29
0038:  DATA 20,30
003A:  DATA 20,0D
003C:  DATA 0A,00
003E:  DATA 20,20
0040:  DATA 20,20
0042:  DATA 32,29
0044:  DATA 20,32
0046:  DATA 30,20
0048:  DATA 0D,0A
004A:  DATA 00,00
004C:  DATA 20,20
004E:  DATA 20,20
0050:  DATA 33,29
0052:  DATA 20,35
0054:  DATA 30,20
0056:  DATA 0D,0A
0058:  DATA 00,00
005A:  DATA 20,20
005C:  DATA 20,20
005E:  DATA 34,29
0060:  DATA 20,38
0062:  DATA 30,20
0064:  DATA 0D,0A
0066:  DATA 00,00
0068:  DATA 20,20
006A:  DATA 20,20
006C:  DATA 35,29
006E:  DATA 20,31
0070:  DATA 30,30
0072:  DATA 20,0D
0074:  DATA 0A,00
0076:  DATA 0C,20
0078:  DATA 4D,6F
007A:  DATA 74,6F
007C:  DATA 72,20
007E:  DATA 43,43
0080:  DATA 20,00
0082:  DATA 20,56
0084:  DATA 65,6C
0086:  DATA 6F,63
0088:  DATA 69,64
008A:  DATA 61,64
008C:  DATA 65,3D
008E:  DATA 25,6C
0090:  DATA 75,20
0092:  DATA 00,00
*
01CA:  TBLRD*+
01CC:  MOVF   FF5,F
01CE:  BZ    01EA
01D0:  MOVFF  FF6,0B
01D4:  MOVFF  FF7,0C
01D8:  MOVF   FF5,W
01DA:  BTFSS  F9E.4
01DC:  BRA    01DA
01DE:  MOVWF  FAD
01E0:  MOVFF  0B,FF6
01E4:  MOVFF  0C,FF7
01E8:  BRA    01CA
01EA:  RETURN 0
*
025E:  TBLRD*+
0260:  MOVF   FF5,F
0262:  BZ    027C
0264:  MOVFF  FF6,0B
0268:  MOVFF  FF7,0C
026C:  MOVFF  FF5,17
0270:  RCALL  020E
0272:  MOVFF  0B,FF6
0276:  MOVFF  0C,FF7
027A:  BRA    025E
027C:  GOTO   0454 (RETURN)
0280:  TBLRD*+
0282:  MOVFF  FF6,0C
0286:  MOVFF  FF7,0D
028A:  MOVFF  FF5,17
028E:  RCALL  020E
0290:  MOVFF  0C,FF6
0294:  MOVFF  0D,FF7
0298:  DECFSZ 0B,F
029A:  BRA    0280
029C:  GOTO   046C (RETURN)
02A0:  BTFSC  FD8.1
02A2:  BRA    02AA
02A4:  CLRF   FEA
02A6:  MOVLW  1F
02A8:  MOVWF  FE9
02AA:  CLRF   00
02AC:  CLRF   01
02AE:  CLRF   02
02B0:  CLRF   03
02B2:  CLRF   1F
02B4:  CLRF   20
02B6:  CLRF   21
02B8:  CLRF   22
02BA:  MOVF   1E,W
02BC:  IORWF  1D,W
02BE:  IORWF  1C,W
02C0:  IORWF  1B,W
02C2:  BZ    031C
02C4:  MOVLW  20
02C6:  MOVWF  23
02C8:  BCF    FD8.0
02CA:  RLCF   17,F
02CC:  RLCF   18,F
02CE:  RLCF   19,F
02D0:  RLCF   1A,F
02D2:  RLCF   1F,F
02D4:  RLCF   20,F
02D6:  RLCF   21,F
02D8:  RLCF   22,F
02DA:  MOVF   1E,W
02DC:  SUBWF  22,W
02DE:  BNZ   02F0
02E0:  MOVF   1D,W
02E2:  SUBWF  21,W
02E4:  BNZ   02F0
02E6:  MOVF   1C,W
02E8:  SUBWF  20,W
02EA:  BNZ   02F0
02EC:  MOVF   1B,W
02EE:  SUBWF  1F,W
02F0:  BNC   0310
02F2:  MOVF   1B,W
02F4:  SUBWF  1F,F
02F6:  MOVF   1C,W
02F8:  BTFSS  FD8.0
02FA:  INCFSZ 1C,W
02FC:  SUBWF  20,F
02FE:  MOVF   1D,W
0300:  BTFSS  FD8.0
0302:  INCFSZ 1D,W
0304:  SUBWF  21,F
0306:  MOVF   1E,W
0308:  BTFSS  FD8.0
030A:  INCFSZ 1E,W
030C:  SUBWF  22,F
030E:  BSF    FD8.0
0310:  RLCF   00,F
0312:  RLCF   01,F
0314:  RLCF   02,F
0316:  RLCF   03,F
0318:  DECFSZ 23,F
031A:  BRA    02C8
031C:  MOVFF  1F,FEF
0320:  MOVFF  20,FEC
0324:  MOVFF  21,FEC
0328:  MOVFF  22,FEC
032C:  RETURN 0
032E:  MOVF   FE9,W
0330:  MOVWF  0F
0332:  MOVLW  3B
0334:  MOVWF  16
0336:  MOVLW  9A
0338:  MOVWF  15
033A:  MOVLW  CA
033C:  MOVWF  14
033E:  CLRF   13
0340:  MOVLW  0A
0342:  MOVWF  11
0344:  BSF    FD8.1
0346:  CLRF   FEA
0348:  MOVLW  0B
034A:  MOVWF  FE9
034C:  MOVFF  0E,1A
0350:  MOVFF  0D,19
0354:  MOVFF  0C,18
0358:  MOVFF  0B,17
035C:  MOVFF  16,1E
0360:  MOVFF  15,1D
0364:  MOVFF  14,1C
0368:  MOVFF  13,1B
036C:  RCALL  02A0
036E:  MOVF   01,W
0370:  MOVF   00,F
0372:  BNZ   0392
0374:  MOVF   11,W
0376:  XORLW  01
0378:  BZ    0392
037A:  MOVF   0F,W
037C:  BZ    0394
037E:  ANDLW  0F
0380:  SUBWF  11,W
0382:  BZ    0386
0384:  BC    039E
0386:  BTFSC  0F.7
0388:  BRA    039E
038A:  BTFSC  0F.6
038C:  BRA    0394
038E:  MOVLW  20
0390:  BRA    0396
0392:  CLRF   0F
0394:  MOVLW  30
0396:  ADDWF  00,F
0398:  MOVFF  00,17
039C:  RCALL  020E
039E:  BCF    FD8.1
03A0:  MOVFF  16,1A
03A4:  MOVFF  15,19
03A8:  MOVFF  14,18
03AC:  MOVFF  13,17
03B0:  CLRF   1E
03B2:  CLRF   1D
03B4:  CLRF   1C
03B6:  MOVLW  0A
03B8:  MOVWF  1B
03BA:  RCALL  02A0
03BC:  MOVFF  03,16
03C0:  MOVFF  02,15
03C4:  MOVFF  01,14
03C8:  MOVFF  00,13
03CC:  DECFSZ 11,F
03CE:  BRA    0344
03D0:  GOTO   0482 (RETURN)
*
0504:  ADDWF  FE8,W
0506:  CLRF   FF7
0508:  RLCF   FF7,F
050A:  ADDLW  1F
050C:  MOVWF  FF6
050E:  MOVLW  05
0510:  ADDWFC FF7,F
0512:  TBLRD*-
0514:  MOVF   FF5,W
0516:  MOVWF  FFA
0518:  TBLRD*
051A:  MOVF   FF5,W
051C:  MOVWF  FF9
051E:  DATA B6,04
0520:  DATA C2,04
0522:  DATA D2,04
0524:  DATA E2,04
0526:  DATA F2,04
....................  
.................... #list 
....................  
.................... #fuses HS, CPUDIV1,PLL5,USBDIV 
.................... #use delay(clock=20000000) 
*
0094:  CLRF   FEA
0096:  MOVLW  18
0098:  MOVWF  FE9
009A:  MOVF   FEF,W
009C:  BZ    00B8
009E:  MOVLW  06
00A0:  MOVWF  01
00A2:  CLRF   00
00A4:  DECFSZ 00,F
00A6:  BRA    00A4
00A8:  DECFSZ 01,F
00AA:  BRA    00A2
00AC:  MOVLW  7B
00AE:  MOVWF  00
00B0:  DECFSZ 00,F
00B2:  BRA    00B0
00B4:  DECFSZ FEF,F
00B6:  BRA    009E
00B8:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use standard_io(B) //comentar linha caso a biblioteca do LCD seja diferente 
.................... #define use_portB_lcd TRUE //comentar linha caso a biblioteca do LCD seja diferente 
.................... #define LCD_TYPE 2 
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00E8:  MOVLW  0F
00EA:  ANDWF  F93,W
00EC:  IORLW  F0
00EE:  MOVWF  F93
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00F0:  BSF    F8A.2
....................    delay_cycles(1); 
00F2:  NOP   
....................    lcd_output_enable(1); 
00F4:  BSF    F8A.0
....................    delay_cycles(1); 
00F6:  NOP   
....................    high = lcd_read_nibble(); 
00F8:  RCALL  00DC
00FA:  MOVFF  01,1F
....................        
....................    lcd_output_enable(0); 
00FE:  BCF    F8A.0
....................    delay_cycles(1); 
0100:  NOP   
....................    lcd_output_enable(1); 
0102:  BSF    F8A.0
....................    delay_us(1); 
0104:  BRA    0106
0106:  BRA    0108
0108:  NOP   
....................    low = lcd_read_nibble(); 
010A:  RCALL  00DC
010C:  MOVFF  01,1E
....................        
....................    lcd_output_enable(0); 
0110:  BCF    F8A.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0112:  MOVLW  0F
0114:  ANDWF  F93,W
0116:  MOVWF  F93
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0118:  SWAPF  1F,W
011A:  MOVWF  00
011C:  MOVLW  F0
011E:  ANDWF  00,F
0120:  MOVF   00,W
0122:  IORWF  1E,W
0124:  MOVWF  01
0126:  GOTO   0134 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00DC:  MOVF   F81,W
00DE:  MOVWF  00
00E0:  SWAPF  00,W
00E2:  ANDLW  0F
00E4:  MOVWF  01
....................   #endif 
00E6:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00BA:  SWAPF  1F,W
00BC:  ANDLW  F0
00BE:  MOVWF  00
00C0:  MOVLW  0F
00C2:  ANDWF  F8A,W
00C4:  IORWF  00,W
00C6:  MOVWF  F8A
....................   #endif 
....................        
....................    delay_cycles(1); 
00C8:  NOP   
....................    lcd_output_enable(1); 
00CA:  BSF    F8A.0
....................    delay_us(2); 
00CC:  MOVLW  02
00CE:  MOVWF  00
00D0:  DECFSZ 00,F
00D2:  BRA    00D0
00D4:  BRA    00D6
00D6:  NOP   
....................    lcd_output_enable(0); 
00D8:  BCF    F8A.0
00DA:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
012A:  BCF    F93.0
....................    lcd_rs_tris(); 
012C:  BCF    F93.1
....................    lcd_rw_tris(); 
012E:  BCF    F93.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0130:  BCF    F8A.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0132:  BRA    00E8
0134:  MOVFF  01,1E
0138:  BTFSC  01.7
013A:  BRA    0132
....................    lcd_output_rs(address); 
013C:  BCF    F8A.1
013E:  BTFSC  1C.0
0140:  BSF    F8A.1
....................    delay_cycles(1); 
0142:  NOP   
....................    lcd_output_rw(0); 
0144:  BCF    F8A.2
....................    delay_cycles(1); 
0146:  NOP   
....................    lcd_output_enable(0); 
0148:  BCF    F8A.0
....................    lcd_send_nibble(n >> 4); 
014A:  SWAPF  1D,W
014C:  MOVWF  1E
014E:  MOVLW  0F
0150:  ANDWF  1E,F
0152:  MOVFF  1E,1F
0156:  RCALL  00BA
....................    lcd_send_nibble(n & 0xf); 
0158:  MOVF   1D,W
015A:  ANDLW  0F
015C:  MOVWF  1E
015E:  MOVWF  1F
0160:  RCALL  00BA
0162:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0164:  MOVLW  0F
0166:  ANDWF  F93,W
0168:  MOVWF  F93
....................   #endif 
....................    lcd_enable_tris(); 
016A:  BCF    F93.0
....................    lcd_rs_tris(); 
016C:  BCF    F93.1
....................    lcd_rw_tris(); 
016E:  BCF    F93.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0170:  BCF    F8A.1
....................    lcd_output_rw(0); 
0172:  BCF    F8A.2
....................    lcd_output_enable(0); 
0174:  BCF    F8A.0
....................      
....................    delay_ms(15); 
0176:  MOVLW  0F
0178:  MOVWF  18
017A:  RCALL  0094
....................    for(i=1;i<=3;++i) 
017C:  MOVLW  01
017E:  MOVWF  0B
0180:  MOVF   0B,W
0182:  SUBLW  03
0184:  BNC   0196
....................    { 
....................        lcd_send_nibble(3); 
0186:  MOVLW  03
0188:  MOVWF  1F
018A:  RCALL  00BA
....................        delay_ms(5); 
018C:  MOVLW  05
018E:  MOVWF  18
0190:  RCALL  0094
0192:  INCF   0B,F
0194:  BRA    0180
....................    } 
....................     
....................    lcd_send_nibble(2); 
0196:  MOVLW  02
0198:  MOVWF  1F
019A:  RCALL  00BA
....................    delay_ms(5); 
019C:  MOVLW  05
019E:  MOVWF  18
01A0:  RCALL  0094
....................    for(i=0;i<=3;++i) 
01A2:  CLRF   0B
01A4:  MOVF   0B,W
01A6:  SUBLW  03
01A8:  BNC   01C6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01AA:  CLRF   03
01AC:  MOVF   0B,W
01AE:  MOVFF  FF2,0C
01B2:  BCF    FF2.7
01B4:  RCALL  0004
01B6:  BTFSC  0C.7
01B8:  BSF    FF2.7
01BA:  MOVWF  0C
01BC:  CLRF   1C
01BE:  MOVWF  1D
01C0:  RCALL  012A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01C2:  INCF   0B,F
01C4:  BRA    01A4
01C6:  GOTO   03F8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01EC:  DECFSZ 19,W
01EE:  BRA    01F2
01F0:  BRA    01F8
....................       address=LCD_LINE_TWO; 
01F2:  MOVLW  40
01F4:  MOVWF  1A
01F6:  BRA    01FA
....................    else 
....................       address=0; 
01F8:  CLRF   1A
....................       
....................    address+=x-1; 
01FA:  MOVLW  01
01FC:  SUBWF  18,W
01FE:  ADDWF  1A,F
....................    lcd_send_byte(0,0x80|address); 
0200:  MOVF   1A,W
0202:  IORLW  80
0204:  MOVWF  1B
0206:  CLRF   1C
0208:  MOVWF  1D
020A:  RCALL  012A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
020C:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
020E:  MOVF   17,W
0210:  XORLW  07
0212:  BZ    0222
0214:  XORLW  0B
0216:  BZ    022C
0218:  XORLW  06
021A:  BZ    023C
021C:  XORLW  02
021E:  BZ    0248
0220:  BRA    0252
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0222:  MOVLW  01
0224:  MOVWF  18
0226:  MOVWF  19
0228:  RCALL  01EC
022A:  BRA    025C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
022C:  CLRF   1C
022E:  MOVLW  01
0230:  MOVWF  1D
0232:  RCALL  012A
....................                      delay_ms(2); 
0234:  MOVLW  02
0236:  MOVWF  18
0238:  RCALL  0094
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
023A:  BRA    025C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
023C:  MOVLW  01
023E:  MOVWF  18
0240:  MOVLW  02
0242:  MOVWF  19
0244:  RCALL  01EC
0246:  BRA    025C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0248:  CLRF   1C
024A:  MOVLW  10
024C:  MOVWF  1D
024E:  RCALL  012A
0250:  BRA    025C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0252:  MOVLW  01
0254:  MOVWF  1C
0256:  MOVFF  17,1D
025A:  RCALL  012A
....................      #endif 
....................    } 
025C:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... void main() 
*
03D4:  CLRF   FF8
03D6:  BCF    FD0.7
03D8:  BSF    FB8.3
03DA:  MOVLW  08
03DC:  MOVWF  FAF
03DE:  MOVLW  02
03E0:  MOVWF  FB0
03E2:  MOVLW  A6
03E4:  MOVWF  FAC
03E6:  MOVLW  90
03E8:  MOVWF  FAB
03EA:  MOVF   FC1,W
03EC:  ANDLW  C0
03EE:  IORLW  0F
03F0:  MOVWF  FC1
03F2:  MOVLW  07
03F4:  MOVWF  FB4
.................... {lcd_init(); 
03F6:  BRA    0164
.................... while(true) 
.................... { 
....................    char selection; 
....................    int value; 
....................    unsigned int32 vel; 
....................    printf("\r\nSelecione a rotacao:\r\n"); 
03F8:  MOVLW  18
03FA:  MOVWF  FF6
03FC:  MOVLW  00
03FE:  MOVWF  FF7
0400:  RCALL  01CA
....................    printf("    1) 0 \r\n"); 
0402:  MOVLW  32
0404:  MOVWF  FF6
0406:  MOVLW  00
0408:  MOVWF  FF7
040A:  RCALL  01CA
....................    printf("    2) 20 \r\n"); 
040C:  MOVLW  3E
040E:  MOVWF  FF6
0410:  MOVLW  00
0412:  MOVWF  FF7
0414:  RCALL  01CA
....................    printf("    3) 50 \r\n"); 
0416:  MOVLW  4C
0418:  MOVWF  FF6
041A:  MOVLW  00
041C:  MOVWF  FF7
041E:  RCALL  01CA
....................    printf("    4) 80 \r\n"); 
0420:  MOVLW  5A
0422:  MOVWF  FF6
0424:  MOVLW  00
0426:  MOVWF  FF7
0428:  RCALL  01CA
....................    printf("    5) 100 \r\n"); 
042A:  MOVLW  68
042C:  MOVWF  FF6
042E:  MOVLW  00
0430:  MOVWF  FF7
0432:  RCALL  01CA
....................   setup_timer_2(T2_DIV_BY_4, 249, 1); 
0434:  MOVLW  00
0436:  IORLW  05
0438:  MOVWF  FCA
043A:  MOVLW  F9
043C:  MOVWF  FCB
....................   set_pwm1_duty(value); 
043E:  MOVFF  06,FBE
....................   lcd_gotoxy(1,1); 
0442:  MOVLW  01
0444:  MOVWF  18
0446:  MOVWF  19
0448:  RCALL  01EC
....................   printf(lcd_putc,"\f Motor CC "); 
044A:  MOVLW  76
044C:  MOVWF  FF6
044E:  MOVLW  00
0450:  MOVWF  FF7
0452:  BRA    025E
....................   lcd_gotoxy(1,2); 
0454:  MOVLW  01
0456:  MOVWF  18
0458:  MOVLW  02
045A:  MOVWF  19
045C:  RCALL  01EC
....................   printf(lcd_putc," Velocidade=%lu ",vel); 
045E:  MOVLW  82
0460:  MOVWF  FF6
0462:  MOVLW  00
0464:  MOVWF  FF7
0466:  MOVLW  0C
0468:  MOVWF  0B
046A:  BRA    0280
046C:  MOVLW  41
046E:  MOVWF  FE9
0470:  MOVFF  0A,0E
0474:  MOVFF  09,0D
0478:  MOVFF  08,0C
047C:  MOVFF  07,0B
0480:  BRA    032E
0482:  MOVLW  20
0484:  MOVWF  17
0486:  RCALL  020E
....................    do { 
....................    selection=getc(); 
0488:  BTFSS  F9E.5
048A:  BRA    0488
048C:  MOVFF  FAE,05
....................   } while((selection<'1')||(selection>'6')); 
0490:  MOVF   05,W
0492:  SUBLW  30
0494:  BC    0488
0496:  MOVF   05,W
0498:  SUBLW  36
049A:  BNC   0488
....................    setup_ccp1(CCP_PWM); 
049C:  BCF    F94.2
049E:  BCF    F8B.2
04A0:  MOVLW  0C
04A2:  MOVWF  FBD
04A4:  CLRF   FB7
04A6:  CLRF   FB6
....................    switch(selection) { 
04A8:  MOVLW  31
04AA:  SUBWF  05,W
04AC:  ADDLW  FB
04AE:  BC    0500
04B0:  ADDLW  05
04B2:  GOTO   0504
....................      case '1' : value=0; 
04B6:  CLRF   06
....................                 vel=0;   
04B8:  CLRF   0A
04BA:  CLRF   09
04BC:  CLRF   08
04BE:  CLRF   07
....................                 break; 
04C0:  BRA    0500
....................      case '2' : value=50; 
04C2:  MOVLW  32
04C4:  MOVWF  06
....................                 vel=20; 
04C6:  CLRF   0A
04C8:  CLRF   09
04CA:  CLRF   08
04CC:  MOVLW  14
04CE:  MOVWF  07
....................                 break; 
04D0:  BRA    0500
....................      case '3' : value=125; 
04D2:  MOVLW  7D
04D4:  MOVWF  06
....................                 vel=50; 
04D6:  CLRF   0A
04D8:  CLRF   09
04DA:  CLRF   08
04DC:  MOVLW  32
04DE:  MOVWF  07
....................                 break; 
04E0:  BRA    0500
....................      case '4' : value=200; 
04E2:  MOVLW  C8
04E4:  MOVWF  06
....................                 vel=80; 
04E6:  CLRF   0A
04E8:  CLRF   09
04EA:  CLRF   08
04EC:  MOVLW  50
04EE:  MOVWF  07
....................                 break; 
04F0:  BRA    0500
....................      case '5' : value=250; 
04F2:  MOVLW  FA
04F4:  MOVWF  06
....................                 vel=100; 
04F6:  CLRF   0A
04F8:  CLRF   09
04FA:  CLRF   08
04FC:  MOVLW  64
04FE:  MOVWF  07
....................                 break; 
....................    }}} 
0500:  BRA    03F8
....................  
0502:  SLEEP 

Configuration Fuses:
   Word  1: CC24   PLL5 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
